<tool id="dimspy_merge_peaklists" name="Merge peaklists" version="0.1.0">
    <description>Merge peaklists produced by the tools 'Process scans (and SIM-Stitch)' or 'Replicate filter'</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command><![CDATA[
        dimspy merge-peaklists
        #for $fn in $hdf5_files_in
            --input "$fn"
        #end for
        #if $multilist.flag == "true"
	        --output .
	        --filelist "$multilist.filelist"
	    #else
	        --output "$hdf5_file_out"
            #if $filelist
                --filelist "$multilist.filelist"
            #end if
	    #end if
    ]]></command>
    <inputs>
        <param name="hdf5_files_in" type="data" multiple="true" format="h5" min="2" label="Peaklist to merge" help="Select a minimum of two hdf5 files" argument="--input" />
        <conditional name="multilist">
            <param name="flag" type="boolean" checked="false" truevalue="true" falsevalue="false" label="Create multiple merged peaklists?" help="Based on a 'multilist' column in the filelist text file, divide the peaklists into different lists
                                                       e.g. [pl1, pl2, pl3, pl4] can be converted to 2 new lists:
                                                            [pl1, pl3] [pl2, pl4]"/>
            <when value="true">
                <param name="filelist" type="data" format="tsv,tabular" label="Filelist" argument="filelist" />
            </when>
            <when value="false">
                <param name="filelist" type="data" optional="true" format="tsv,tabular" label="Filelist" argument="filelist" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection name="multiple_merged" type="list" label="${tool.name} on ${on_string}: Peaklists (HDF5)">
            <filter>multilist["flag"] is True</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.hdf5" format="h5" directory="." visible="false" />
        </collection>
        <data name="hdf5_file_out" format="h5" label="${tool.name} on ${on_string}: Peaklists (HDF5 file)">
            <filter>multilist["flag"] is False</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="hdf5_files_in" value="pls.h5,pls_QC18.h5" ftype="h5" />
            <output name="hdf5_file_out" value="merged_01.h5" ftype="h5" compare="sim_size" />
        </test>
        <test>
            <param name="hdf5_files_in" value="pls.h5,pls_QC18.h5" ftype="h5" />
            <param name="multilist|filelist" value="filelist_merge.txt" ftype="tsv"/>
            <output name="hdf5_file_out" value="merged_02.h5" ftype="h5" compare="sim_size" />
        </test>
    </tests>
    <help><![CDATA[
=============================================================
Merge peaklists 
=============================================================
-----------
Description
-----------
Merge peaklists into a single list of peaklist objects. 

The output of 'process scans' is a python list of dimspy.peaklist objects e.g.

[ pl1, pl2, pl3 ]

These lists are then saved as hdf5 (.h5) files that can be reloaded. If a user has multiple of these lists, they 
can be merged with this function.

e.g. 

[ pl1, pl2, pl3 ] + [ pl4, pl5, pl6 ] = [ pl1, pl2, pl3, pl4, pl5, pl6 ]

and then saved as hdf5 file. Additionally a filelist can be included to provide meta information regarding each file. e.g.:


=========================== ============= ================
filename	            batch	  classLabel	 
=========================== ============= ================ 
1.mzML                      1	          blank
2.mzML                      1	          QC
3.mzML                      1	          sample
4.mzML                      2	          blank	        
5.mzML                      2	          QC	        
6.mzML                      2    	  sample	
=========================== ============= ================


-----------
Peakmatrix
-----------
If a dimspy.peakmatrix object is merged the individual peaklists from within the peakmatrix object will be extracted and then merged.

e.g.

[ pl1, pl2, pl3 ] + [ pm ] = [ pl1, pl2, pl3 ] + [ pl4, pl5, pl6 ] = [ pl1, pl2, pl3, pl4, pl5, pl6 ]



-----------
Multilist
-----------
If a column named ('multilist') is added in the Filelist then multiple lists of peaklists can be generated. Each list of peaklists 
will generate its own hdf5 file
e.g. 

[ pl1, pl2, pl3, pl4 ] derived from [ 1.mzML, 2.mzML, 3.mzML, 4.mzML ]

Using Filelist:

=========================== ============= =============
filename	            classLabel    multilist
=========================== ============= ============= 
1.mzML                      blank         1
2.mzML                      blank         2
3.mzML                      sample        1
4.mzML                      sample        2
=========================== ============= =============  


Will create two peaklist hdf5 files:

[ pl1, pl3 ]

and

[ pl2, pl4 ]

Note that is currently not possible to use the 'Write peaklists to tsv files (data collection)?' option when performing a multilist merge

]]></help>
    <expand macro="citations" />
</tool>
